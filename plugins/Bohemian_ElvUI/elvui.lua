---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by brode.
--- DateTime: 07.02.2022 18:27
---

local AddonName, E = ...
E.MODULES_TO_LOAD = {}
E.isElvUI = false

local blacklist = {
    "Profession",
    "DKPLogFrameRow",
    "LootMasterFrameBidder",
    "GuildCraftFrameSkillFrame",
    "GuildCraftFrameHighlight",
    "GuildCraftListFrameHighlight",
    "ButtonAuctionMode",
    "HeaderResist",
}
local whitelist = {
    "BohemkaDKPInterfaceOptionsPanelModule"
}
local stripOnly = {
    "DKPLogFrameHeader",
    "DetailFrameDKPFrame",
    "GuildFrameColumnHeader6",
    "GuildFrameGuildStatusColumnHeader5",
    "HighestBidderFrame",
    "SkillReagent",
    "SkillRankFrameBorder",
    "GuildCraftListFrameSkillFrame",
    "Timer",
    "Version",
    "GuildFrameStatistics",
}

E.TYPES = {
    scrollframe = function(frame)
        frame:StripTextures()
        ElvUI[1].Skins:HandleScrollBar(_G[frame:GetName().."ScrollBar"])
    end,
    button = function(frame)
        frame:StripTextures()
        frame:StyleButton()
        ElvUI[1].Skins:HandleButton(frame)
    end,
    statusbar = function(frame)
        ElvUI[1].Skins:HandleStatusBar(frame)
    end,
    frame = function(frame)
        if string.find(frame:GetName(), "Scroll") then
            return
        end
        if string.find(frame:GetName(), "Dropdown") then
            ElvUI[1].Skins:HandleDropDownBox(frame)
            return
        end
        frame:StripTextures()
        ElvUI[1].Skins:HandleFrame(frame, true)
    end,
    editbox = function(frame)
        frame:StripTextures()
        ElvUI[1].Skins:HandleEditBox(frame)
    end,
    checkbutton = function(frame)
        frame:StripTextures()
        frame:StyleButton()
        ElvUI[1].Skins:HandleCheckBox(frame)
    end,
    closebutton = function(frame)
        frame:StripTextures()
        ElvUI[1].Skins:HandleCloseButton(frame)
    end,
}

Bohemian.RegisterModule(AddonName, E, function()
end)
local C = E.CORE


E.MODULES = {
    Bohemian_Professions = function()
        C:SetFrameOffsetY(DetailFrameProfFrame1, -6)
        GuildCraftListFrame:SetPoint("TOPLEFT", GuildFrame, "TOPRIGHT", 0, 0)
        GuildCraftListFrame:SetSize(354, 424)
        GuildCraftFrame:SetSize(354, 424)
        GuildCraftFrame.attachedX = 2
        GuildCraftFrame.detachedY = 0
        GuildCraftListFrameClear:ClearAllPoints(true)
        GuildCraftFrameClear:ClearAllPoints(true)
        GuildCraftListFrameClear:SetPoint("BOTTOMLEFT", 183 , 3)
        GuildCraftFrameClear:SetPoint("BOTTOMLEFT", 183 , 3)
        GuildCraftMemberSearchValue:ClearAllPoints(true)
        GuildCraftListMemberSearchValue:ClearAllPoints(true)
        GuildCraftMemberSearchValue:SetPoint("BOTTOMLEFT", GuildCraftFrame, 15, 5)
        GuildCraftMemberSearchValue:SetHeight(18)
        GuildCraftListMemberSearchValue:SetHeight(18)
        GuildCraftMemberSearchValue:SetTextInsets(5,5,0,0)
        GuildCraftListMemberSearchValue:SetTextInsets(5,5,0,0)
        GuildCraftListMemberSearchValue:SetPoint("BOTTOMLEFT", GuildCraftListFrame, 15, 5)
        GuildCraftListFrameClose:SetPoint("TOPRIGHT", 0 , 0)
        GuildCraftFrameClose:SetPoint("TOPRIGHT", 0 , 0)
        GuildCraftListFrameTitle:SetPoint("TOP", 0 , -5)
        GuildCraftFrameTitle:SetPoint("TOP", 0 , -5)
        GuildCraftListFrameScrollFrame:ClearAllPoints(true)
        GuildCraftListFrameScrollFrame:SetPoint('TOPRIGHT', -30, -65)
        GuildCraftListFrameScrollFrameTop:Hide()
        GuildCraftListFrameScrollFrameBottom:Hide()
        GuildCraftListFrameScrollFrameMiddle:Hide()
        --GuildCraftFrameScrollFrameTop:Hide()
        --GuildCraftFrameScrollFrameBottom:Hide()
        --GuildCraftFrameScrollFrameMiddle:Hide()
        GuildCraftFrameScrollFrame:ClearAllPoints(true)
        GuildCraftFrameScrollFrame:SetPoint('TOPRIGHT', -40, -65)
        _G["GuildCraftListFrameSkillFrame1"]:SetPoint("TOPLEFT", 22, -65)
        _G["GuildCraftFrameSkillFrame1"]:SetPoint("TOPLEFT", 17, -65)
        GuildCraftFrameSkillRankFrame:SetPoint("TOPLEFT", 8, -37)
        GuildCraftFrameSkillRankFrame:SetSize(336, 17)
        GuildCraftFramePlayerReagents:SetPoint("TOPLEFT", 80, -15)
        GuildCraftListFrameOfflineMembers:SetPoint("TOPLEFT", 110, -30)
        GuildCraftFrameScrollDetailFrame:SetPoint('TOPLEFT', 17, -214)

        ElvUI[1].Skins:HandleIcon(GuildCraftFrameScrollDetailFrameChildFrameSkillIconTexture, true)
        for i = 1, 8 do
            local icon = _G['GuildCraftFrameScrollDetailFrameChildFrameSkillReagent'..i..'IconTexture']
            local count = _G['GuildCraftFrameScrollDetailFrameChildFrameSkillReagent'..i..'Count']
            local nameFrame = _G['GuildCraftFrameScrollDetailFrameChildFrameSkillReagent'..i..'NameFrame']

            ElvUI[1].Skins:HandleIcon(icon, true)
            icon:SetDrawLayer('OVERLAY')
            count:SetDrawLayer('OVERLAY')

            nameFrame:SetAlpha(0)
        end
        GuildCraftFrameScrollDetailFrameChildFrame:StripTextures()

        local statusBars = {
            GuildCraftFrameSkillRankFrame,
        }
        for i=1, CRAFTS_LIST_DISPLAYED do
            local statusBar = _G["GuildCraftListFrameSkillFrame"..i.."SkillButtonRankFrame"]
            table.insert(statusBars, statusBar)
        end
        for _, v in ipairs(statusBars) do
            ElvUI[1].Skins:HandleStatusBar(v, {0.03, 0.25, 0.70})
        end

        local arrowText = BohemkaDKPAuctionFrame:CreateFontString("$parentArrowText", "OVERLAY", "GameFontNormalSmall")
        arrowText:SetPoint("BOTTOM", 0, 51)
        arrowText:SetText("->")
        GuildFrameColumnHeader6:StyleButton()
        GuildFrameGuildStatusColumnHeader5:Enable()
        GuildFrameGuildStatusColumnHeader5:StyleButton()
        C:SetGuildColumnOrder("GuildFrameColumnHeader3", 1)
        C:SetGuildColumnOrder("GuildFrameColumnHeader4", 2)
        C:SetGuildColumnOrder("GuildFrameColumnHeader1", 3)
        C:SetGuildColumnOrder("GuildFrameColumnHeader2", 4)
        GuildFrameDKPButton:SetWidth(GuildFrameDKPButton:GetWidth() - 17)
        for i=1, GUILDMEMBERS_TO_DISPLAY, 1 do
            local button = _G["GuildFrameButton"..i]
            local iconFrame = _G["GuildFrameSpecContainer"..i]
            local icon = _G["GuildFrameSpecContainer"..i.."SpecIcon"]
            iconFrame:ClearAllPoints()
            iconFrame:SetPoint("LEFT", button.backdrop, "RIGHT", 1, 0)

            iconFrame:CreateBackdrop('Default', true)
            iconFrame.backdrop:SetAllPoints(icon)
        end
    end,
    Bohemian_Auction = function()
        C:SetFrameOffsetX(LootMasterFrame, 10)
        C:SetFrameOffset(BidValue, -2, 4)
        BidValue:SetHeight(26)
    end,
    Bohemian_Log = function()
        BohemkaDKPLogFrame:SetPoint("TOPLEFT", GuildMemberDetailFrame, "TOPRIGHT", 6, 1)
    end,
    Bohemian_DKP = function(module)
        local fn = module.UpdateAwardDKPButton
        module.UpdateAwardDKPButton = function()
            fn(module)
            RaidFrameAllAssistCheckButton:ClearAllPoints(true)
            RaidFrameAllAssistCheckButton:SetPoint("TOPLEFT", 1, -24)
        end
        local fn2 = module.AdjustRaidFrame
        module.AdjustRaidFrame = function()
            fn2(module)
            ButtonAwardRaidDKP:ClearAllPoints(true)
            ButtonAwardRaidDKP:SetPoint("RIGHT", RaidFrameReadyCheckButton, "LEFT", -2, 0)
            ButtonAwardRaidDKP:SetHeight(ButtonAwardRaidDKP:GetHeight() + 2)
        end
        module:UpdateAwardDKPButton()

    end,
    Bohemian_Raid = function(module)
        local fn = function(module)
            RaidInfoFrameStats:SetPoint("TOPRIGHT", RaidInfoFrame, "TOPLEFT", -3, 0)
            RaidInfoFrameStats:SetHeight(RaidInfoFrameStats:GetHeight() - 2)
            RaidFrameSessionDuration:SetPoint("TOPLEFT", 8, -7)
            RAID_INFO_FRAME_OFFSET_X = 3
            local once = true
            module.raidInfoFrame:HookScript("OnShow", function()
                if once then
                    once = false
                    C:AddToUpdateQueue(function(id)
                        C:RemoveFromUpdateQueue(id)
                        module:FixRaidInfoFramePosition()
                    end)
                end
            end)
        end
        if module.loaded then
            fn()
        else
            local fn2 = module.LoadAddon
            module.LoadAddon = function(module)
                fn2(module)
                fn(module)
            end
        end

    end,
}


function E.EVENTS:FRAME_CREATED(name, type)
    if E.isElvUI then
        E:ProcessFrame(type, name)
    end
end

function E.EVENTS:ADDON_LOADED(name)
    if name == "ElvUI" then
        if not ElvUI[1].initialized then
            local fn = ElvUI[1].Initialize
            ElvUI[1].Initialize = function(...)
                E:HookLootFrame()
                fn(...)
                E:Initialize()
            end
        else
            E:HookExistingBagFrames()
            E:Initialize()
        end
    end
end

function E:Initialize()
    E.isElvUI = true
    E:ProcessFrames()
    E:ProcessModules()
    C:SetFrameOffsetX(GuildFrameLFGFrame, -50)
end

function E:ProcessFrames()
    for type, frames in pairs(E.CORE.FRAMES) do
        for name, _ in pairs(frames) do
            E:ProcessFrame(type, name)
        end
    end
end

function E:ProcessModule(module)
    if E.MODULES[module.NAME] then
        E.MODULES[module.NAME](module)
    end
end

function E:ProcessModules()
    C:CallModules(function(module)
        if module.isLoaded then
            E:ProcessModule(module)
        end
    end)
    while #E.MODULES_TO_LOAD > 0 do
        local module = table.remove(E.MODULES_TO_LOAD, 1)
        E.EVENTS:MODULE_LOADED(module)
    end
end

function E:ProcessFrame(type, name)
    local whiteListed = false
    for _, item in ipairs(whitelist) do
        if string.find(name, item) then
            whiteListed = true
            break
        end
    end
    if not whiteListed then
        for _, item in ipairs(blacklist) do
            if string.find(name, item) then
                return
            end
        end
    end

    for _, item in ipairs(stripOnly) do
        if string.find(name, item) then
            _G[name]:StripTextures()
            return
        end
    end
    if string.find(name, "Close") then
        type = "closebutton"
    end
    E.TYPES[type](_G[name])
end

