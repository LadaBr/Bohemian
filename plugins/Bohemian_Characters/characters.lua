---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by brode.
--- DateTime: 07.02.2022 19:08
---
---

AccountData = {
    characters = {}
}

local AddonName, E = ...

Bohemian.RegisterModule(AddonName, E, function()
    E:AdjustGuildFrameButtons()
    E:StartRosterChangeDetection()
end)

local C = E.CORE
E.cacheCooldown = 0

if not RosterCharacters then
    RosterCharacters = {}
end

if not Bohemian_Characters then
    Bohemian_Characters = {
        guilds = {}
    }
end

function E:SaveCharacterInfo()
    E:Debug("Saved character info")
    local realm = GetNormalizedRealmName()
    if not realm then
        return
    end
    if not AccountData.characters[realm] then
        AccountData.characters[realm] = {}
    end
    if not Bohemian_Characters.guilds then
        Bohemian_Characters.guilds = {}
    end

    local guildName, guildRankName, guildRankIndex = GetGuildInfo("player")
    if not guildName then
        return
    end
    if not AccountData.characters[realm][guildName] then
        AccountData.characters[realm][guildName] = {}
    end
    AccountData.characters[realm][guildName][C:GetPlayerName(true)] = { rank = guildRankName, rankIndex = guildRankIndex }
end
function E:GetMainCharacter(characters)
    local mainChar
    local mainCharData
    if not characters then
        return
    end
    for name, data in pairs(characters) do
        if not mainCharData or data.rankIndex < mainCharData.rankIndex then
            mainCharData = data
            mainChar = name
        end
    end
    if mainCharData then
        return mainChar, mainCharData.rank, mainCharData.rankIndex
    else
        return nil, nil, nil
    end

end
function E:IsPlayerAlt()
    local _, guildRankName, _ = GetGuildInfo("player")
    if guildRankName == "Alt" or not self:IsPlayerMain() then
        return true
    end
    return false
end
function E:IsPlayerMain()
    return self:GetMainCharacter() == self:GetPlayerName(true)
end

function E:ShareCharactersInfo(sendTo)
    local tmp = {}
    local playerName = C:GetPlayerName(true)
    local characters = self:GetCharacters()
    if not characters then
        return
    end
    for name, _ in pairs(characters) do
        if name ~= playerName then
            tmp[#tmp + 1] = name
        end
    end
    local payload = table.concat(tmp, ",")
    C:SendEventTo(sendTo, self.EVENT.CHARACTERS_INFO, payload)
end

function E:RequestCharactersInfo()
    C:SendEvent("GUILD", self.EVENT.CHARACTERS_INFO_REQUEST)
end

function E:RequestCharactersInfoFrom(player)
    C:SendEventTo(player, self.EVENT.CHARACTERS_INFO_REQUEST)
end

function E:GetCharacters()
    local realm = GetNormalizedRealmName()
    local guildName = GetGuildInfo("player")
    if not AccountData.characters[realm] then
        return
    end
    return AccountData.characters[realm][guildName]
end
function E:GetGuildMemberCharactersData(fullName)
    if not C.guildRoster[fullName] then
        return
    end
    local tmp = {
        [fullName] = {
            rank = C.guildRoster[fullName][2],
            rankIndex = C.guildRoster[fullName][3],
        }
    }
    if RosterCharacters[fullName] then
        for _, name in ipairs(RosterCharacters[fullName]) do
            if C.guildRoster[name] then
                tmp[name] = {
                    rank = C.guildRoster[name][2],
                    rankIndex = C.guildRoster[name][3],
                }
            end
        end
    end
    return tmp
end
function E:GetGuildMemberCharactersDataTooltip(fullName)
    local tmp = {}
    if RosterCharacters[fullName] then
        for _, name in ipairs(RosterCharacters[fullName]) do
            if self.guildRoster[fullName] then
                tmp[#tmp + 1] = strsplit("-", name) .. " - " .. self.guildRoster[name][2]
            end
        end
    end
    return table.concat(tmp, "\n")
end
function E:IsMemberAlt(name)
    if C.guildRoster[name][2] == "Alt" or not self:IsPlayerMain() then
        return true
    end
    return false
end

function E:CompareRosters(roster1, roster2, cb)
    local missing = {}
    local i = 1
    local data
    C:AddToUpdateQueue(function(id)
        if i > #roster1 then
            C:RemoveFromUpdateQueue(id)
            cb(missing)
            return
        end
        data = roster1[i]

        local exists = false
        for _, data2 in ipairs(roster2) do
            if data[1] == data2[1] then
                exists = true
                break
            end
        end
        if not exists then
            table.insert(missing, data)
        end
        i = i + 1
    end)
end

function E:GetPrettyPlayers(players)
    local parsed = {}
    for _, data in ipairs(players) do
        table.insert(parsed, C:AddClassFileNameColorToName(data[11], data[1]) .. " " .. data[4])
    end
    return parsed
end

function E:StartRosterChangeDetection()
    C:AddToUpdateQueue(function(id, elapsed)
        if E.checkRoster and E.cacheCooldown <= 0 then

            local guildName = C:GetGuildName()
            if not guildName then
                return
            end
            E.checkRoster = false
            local roster = {}
            for _, data in pairs(C.guildRoster) do
                table.insert(roster, data)
            end
            local characters = E:GetGuildRoster()
            if #characters > 0 then
                E:CompareRosters(characters, roster, function(left)
                    if #left > 0 then
                        local parsed = E:GetPrettyPlayers(left)
                        E:Print("Players left the guild: " .. table.concat(parsed, ", "))
                    end
                end)
                E:CompareRosters(roster, characters, function(joined)
                    if #joined > 0 then
                        local parsed = E:GetPrettyPlayers(joined)
                        E:Print("Players joined the guild: " .. table.concat(parsed, ", "))
                    end
                end)
            end
            Bohemian_Characters.guilds[guildName] = roster
        end
        if E.cacheCooldown > 0 then
            E.cacheCooldown = E.cacheCooldown - elapsed
        end
    end)
end

function E:GetGuildRoster()
    local guildName = C:GetGuildName()
    return Bohemian_Characters.guilds[guildName] or {}
end