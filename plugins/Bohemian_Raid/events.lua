---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by brode.
--- DateTime: 12.02.2022 11:20
---
local _, E = ...
local A = E.EVENTS
local C = E.CORE

C:RegisterEvent("ZONE_CHANGED")
C:RegisterEvent("READY_CHECK")
C:RegisterEvent("READY_CHECK_FINISHED")
C:RegisterEvent("PLAYER_EQUIPMENT_CHANGED")
C:RegisterEvent("UNIT_AURA")
C:RegisterEvent("UPDATE_INSTANCE_INFO")
C:RegisterEvent("ZONE_CHANGED_NEW_AREA")
C:RegisterEvent('ENCOUNTER_END')



function A:UNIT_AURA(...)
    E:UpdateAuraData(...)
end

function A:COMBAT_LOG_EVENT_UNFILTERED(...)
    -- local arg1, subevent, arg3, arg4, sourceName, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14 = CombatLogGetCurrentEventInfo()
    --print(CombatLogGetCurrentEventInfo())
    --print(_, _, prefix, suffix, type)


    if not IsInRaid() or not UnitIsGroupLeader("player") then
        return
    end


    if Bohemian_RaidConfig.announceParry then
        local _, subevent, _, _, sourceName, _, _, _, destName, _, _, type = CombatLogGetCurrentEventInfo()
        if subevent then
            local _, _, _, suffix = string.find (subevent, "(.-)_(.+)")
            if (suffix == "MISSED") then
                if (type == "PARRY") then
                    if C.raidMembers[sourceName] then
                        SendChatMessage(format("%s was parried by %s.", sourceName, destName), "RAID")
                    end

                end
            end
        end
    end

    if Bohemian_RaidConfig.announceMD then
        local _, subevent, _, _, sourceName, _, _, _, destName, _, _, _, spellName = CombatLogGetCurrentEventInfo()
        if subevent == "SPELL_CAST_SUCCESS" then
            if spellName == "Misdirection" or spellName == "Tricks of the Trade" then
                if C.raidMembers[sourceName] then
                    SendChatMessage(format("%s is misdirecting to %s.", sourceName, destName), "RAID")
                end
            end
        end
    end

    --local _, eventType, _, _, _, _, _, _, destName, _, _, recapID, _ = CombatLogGetCurrentEventInfo()
    --if eventType == "UNIT_DIED" or eventType == "UNIT_DESTROYED" or eventType == "UNIT_DISSIPATES" then
    --    E:RequestRaidInfo()
    --end
end

function A:GROUP_ROSTER_UPDATE()
    E:ShareInfo()
    E:UpdateRaidInfoFrame()
end

function A:READY()
    C:AddToUpdateQueue(function(id, elapsed)
        if not InCombatLockdown() then
            C:RemoveFromUpdateQueue(id)
            SetCVar("cameraDistanceMaxZoomFactor", 4.0)
            SetCVar("nameplateMaxDistance", 41)
        end
    end)
    A:ZONE_CHANGED_NEW_AREA()

end

function A:ADDON_LOADED(name)
    if name == "Blizzard_RaidUI" then
        E:LoadAddon()
    end
end

function A:ZONE_CHANGED()
    E:GetZone()
end

function A:READY_CHECK()
    E:ShareInfoIfChanged()

end

function A:READY_CHECK_FINISHED()
    if UnitIsGroupLeader("player") then
        E:GetZone()
        if E.zone == "Den of Mortal Delights" then
            SendChatMessage("Ready check for Mother Shahraz", E:GetInstanceChannel())
            for name, member in pairs(C.raidMembers) do
                local resistInfo = E.resistInfo[name]
                if resistInfo then
                    if resistInfo[6] < 240 and member.role ~= "MAINTANK" then
                        SendChatMessage(format("%s needs %d more Shadow Resistance!", strsplit("-", name), 240 - resistInfo[6]), E:GetInstanceChannel())
                    end
                end

            end
        end
    end
end

function A:PLAYER_EQUIPMENT_CHANGED()
    E:ShareInfoIfChanged()
end

function A:RESIST_INFO(armor, holy, fire, nature, frost, shadow, arcane, sender)
    E.resistInfo[sender] = {tonumber(armor), tonumber(arcane), tonumber(fire), tonumber(nature), tonumber(frost), tonumber(shadow)}
    E:UpdateTooltip()
    E:UpdateRaidInfoFrame()
end

function A:UPDATE_INSTANCE_INFO()
    E:UpdateSavedInstances()
    RaidFrameRaidInfoButton:Enable()
end

function A:PLAYER_ENTERING_WORLD(isLogin, isReload)
    if not isLogin and not isReload then
        return
    end
    E.firstLoad = true
end

function A:ZONE_CHANGED_NEW_AREA()
    if IsInInstance() and IsInRaid(LE_PARTY_CATEGORY_HOME) and not IsInRaid(LE_PARTY_CATEGORY_INSTANCE) and C:IsGuildRaid() then
        E:Print("This raid counts as a guild run.")
        if UnitIsGroupLeader("player") then
            E:StartRaidHours()
            return
        end
    end
    E.collectingRaidHours = false
end

function A:GUILD_FRAME_AFTER_UPDATE()
    E:UpdateDetailFrame()
end