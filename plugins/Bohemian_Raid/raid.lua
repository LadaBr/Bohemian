---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by brode.
--- DateTime: 09.02.2022 18:31
---

local AddonName, E = ...
Bohemian_RaidConfig = {}

E.resistInfo = {}
E.INTERVAL = 2
E.SESSION_INTERVAL = 10
E.remainingSession = E.SESSION_INTERVAL
E.remaining = 0
E.remainingRequest = 0
E.canShareInfo = false
E.canRequestRaidInfo = true
E.isCasting = false
E.raidTimers = {}
E.GCD = 0
E.currentResist = {}
E.savedInstances = {}
E.lastSharedResist = {}
E.showedSession = nil
Bohemian_RaidStats = {}


Bohemian.RegisterModule(AddonName, E, function()
    Bohemian_RaidConfig.announceParry = Bohemian_RaidConfig.announceParry == nil and true or Bohemian_RaidConfig.announceParry
    Bohemian_RaidConfig.announceMD = Bohemian_RaidConfig.announceMD == nil and true or Bohemian_RaidConfig.announceMD
    Bohemian_RaidConfig.guildRaidMemberRatio = Bohemian_RaidConfig.guildRaidMemberRatio == nil and 80 or Bohemian_RaidConfig.guildRaidMemberRatio
    Bohemian_RaidConfig.raidHours = Bohemian_RaidConfig.raidHours == nil and false or Bohemian_RaidConfig.raidHours

    E:AddConfigFrames(E.CORE:CreateModuleInterfaceConfig("Raid"))
    E:AdjustDetailFrame()
    if IsAddOnLoaded("Blizzard_RaidUI") then
        E:LoadAddon()
    end

end)

local C = E.CORE

function E:LoadAddon()
    if E.loaded then
        return
    end
    E.loaded = true
    E:AddRaidButtonFrame()
    E:AddRaidInfoFrame()
    E.EVENTS:GROUP_ROSTER_UPDATE()
    E:Hook()
end


function E:ForRaidMembers(cb)
    for i = 1, MAX_RAID_MEMBERS do
        local name = C.raidMembersIndex[i]
        cb(i, name and C.raidMembers[name] or nil)
    end
end

function E:RaidGroupFrame_Update()
    E:ForRaidMembers(function(i, data)
        E:UpdateRaidFrame(i, data)
    end)
end

function E:UpdateCurrentResist()
    E.currentResist = E:GetResistInfo()
end

function E:GetResistInfo()
    local tmp = {}
    for i = 0, 6 do
        tmp[#tmp + 1] = select(2, UnitResistance("player", i))
    end
    return tmp
end

function E:ShareInfo()
    E.lastSharedResist = E:GetResistInfo()
    C:SendPriorityEvent(E:GetInstanceChannel(), "RESIST_INFO", unpack(E.lastSharedResist))
end

function E:ShareInfoIfChanged()
    for i, value in ipairs(E.currentResist) do
        if E.lastSharedResist[i] ~= value then
            E:ShareInfo()
        end
    end
end

function E:UpdateAuraData(unitTarget)
    if unitTarget == "player" then
        E.isDrinking = AuraUtil.FindAuraByName("Drink", 'player') ~= nil
        E.isEating = AuraUtil.FindAuraByName("Food", 'player') ~= nil
        local count = C_LossOfControl.GetActiveLossOfControlDataCount()
        E.isCCed = count > 0
        --for i = 1, count do
        --    E:Print(C_LossOfControl.GetActiveLossOfControlData(i))
        --end
        C_Timer.After(1, function()
            E:UpdateCurrentResist()
            E:ShareInfoIfChanged()
        end)
    end
end

function E:GetInstanceChannel()
    if IsInRaid() then
        return "RAID"
    end
    if IsInGroup() then
        return "PARTY"
    end
    return "SAY"
end

function E:GetZone()
    E.zone = GetZoneText()
end

function E:UpdateSavedInstances()
    E.savedInstances = {}
    local num = GetNumSavedInstances()
    for i = 1, num do
        local data = {GetSavedInstanceInfo(i)}
        if data[8] then
            E.savedInstances[#E.savedInstances + 1] = data
        end
    end
end

function E:SetRaidHours(fullName, value)
    if not CanEditPublicNote() then
        return
    end

    value = C:roundWhole(value, 1)
    local note = C:GetGuildMemberNote(fullName)
    local dkpModule = C:GetModule("Bohemian_DKP")
    local currentHours
    local valueStr
    if dkpModule then
        local dkp, hours = strsplit(" ", note)
        valueStr = dkp.." "..value
    else
        if not string.find(note, "0+(%d+)") then
            valueStr = value
        end
    end
    GuildRosterSetPublicNote(C.rosterIndex[fullName], valueStr)
end

function E:AddRaidHours(fullName, value)
    E:SetRaidHours(fullName, E:GetMemberRaidHours(fullName) + value)
end

function E:NoteToRaidHours(note)
    local dkpModule = C:GetModule("Bohemian_DKP")
    local pattern = "(%d+)"
    if not note then
        return
    end
    if dkpModule then
        if string.find(note, " ") then
            pattern = "0+%d+ " .. pattern
        else
            return 0
        end
    end

    return tonumber(note:match(pattern))
end

function E:GetMemberRaidHours(name)
    local note = C:GetGuildMemberNote(name)
    return E:NoteToRaidHours(note)
end

RAID_TIME_COLLECT_INTERVAL = 60

function E:StartRaidHours()
    if E.collectingRaidHours then
        return
    end
    E.collectingRaidHours = true
    E.timeForCollect = RAID_TIME_COLLECT_INTERVAL

    C:AddToUpdateQueue(function(id, elapsed)
        if not E.collectingRaidHours then
            C:RemoveFromUpdateQueue(id)
            return
        end
        if not Bohemian_RaidConfig.raidHours then
            return
        end
        E.timeForCollect = E.timeForCollect - elapsed
        if E.timeForCollect <= 0 then
            E.timeForCollect = RAID_TIME_COLLECT_INTERVAL
            local myZone = GetInstanceInfo()
            for index, memberName in ipairs(C.raidMembersIndex) do
                local member = C.raidMembers[memberName]
                local unitId = "raid"..index
                local isAFK = UnitIsAFK(unitId)
                local inCombat = UnitAffectingCombat(unitId)
                if member and C.guildRoster[memberName] and not isAFK and member.online and inCombat then
                    local zone = C.guildRoster[memberName][6]
                    if myZone == zone then
                        E:AddRaidHours(memberName, RAID_TIME_COLLECT_INTERVAL / 60)
                    end
                end
            end
        end
    end)
end

function E:GetReadableRaidHours(hours, decimals)
    if hours == nil then
        return 0
    end
    return round(hours / 60, decimals or 1)
end